PyCity Schools Analysis


# Dependencies and Setup
import pandas as pd
from pathlib import Path

# File to Load (Remember to Change These)
school_data_to_load = Path("Resources/schools_complete.csv")
student_data_to_load = Path("Resources/students_complete.csv")

# Read School and Student Data File and store into Pandas DataFrames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset.
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])
school_data_complete.head()

Student ID	student_name	gender	grade	school_name	reading_score	math_score	School ID	type	size	budget
0	0	Paul Bradley	M	9th	Huang High School	66	79	0	District	2917	1910635
1	1	Victor Smith	M	12th	Huang High School	94	61	0	District	2917	1910635
2	2	Kevin Rodriguez	M	12th	Huang High School	90	60	0	District	2917	1910635
3	3	Dr. Richard Scott	M	12th	Huang High School	67	58	0	District	2917	1910635
4	4	Bonnie Ray	F	9th	Huang High School	97	84	0	District	2917	1910635

District Summary
Perform the necessary calculations and then create a high-level snapshot of the district's key metrics in a DataFrame.

Include the following:

# Calculate the total number of unique schools
unique_school_name=school_data_complete['school_name'].unique()
total_school_number=len(unique_school_name)
total_school_number

Total students
total_students_number=school_data_complete["student_name"].count()
total_students_number

Total budget
total_budget = school_data["budget"].sum()
total_budget

Average math score
average_math_score = school_data_complete["math_score"].mean()
average_math_score

Average reading score
average_reading_score = school_data_complete["reading_score"].mean()
average_reading_score

% passing math (the percentage of students who passed math)
students_passing_math = school_data_complete.loc[school_data_complete["math_score"] >= 70]
number_students_passing_math = students_passing_math["Student ID"].count()

percent_passing_math = (number_students_passing_math / total_students_number) * 100

percent_passing_math

% passing reading (the percentage of students who passed reading)
students_passing_reading = school_data_complete.loc[school_data_complete["reading_score"] >= 70]
number_students_passing_reading = students_passing_reading["Student ID"].count()

percent_passing_reading = (number_students_passing_reading / total_students_number) * 100
percent_passing_reading

% overall passing (the percentage of students who passed math AND reading)
Overall_passing = school_data_complete[(school_data_complete['math_score'] >= 70) & (school_data_complete['reading_score'] >= 70)]['Student ID'].count()/total_students_number*100
Overall_passing

School Summary
Perform the necessary calculations and then create a DataFrame that summarizes key metrics about each school.

Include the following:

School name

School type
school_types = school_data.set_index(["school_name"])["type"]
school_types

Total students
per_school_counts = school_data_complete["school_name"].value_counts()
per_school_counts

Total school budget
per_school_budget = school_data_complete.groupby("school_name")["budget"].mean()
per_school_budget
per_school_capita = per_school_budget /per_school_counts
per_school_capita

Per student budget

Average math score
per_school_math = school_data_complete.groupby("school_name")["math_score"].mean()
per_school_math

Average reading score
per_school_reading = school_data_complete.groupby("school_name")["reading_score"].mean()
per_school_reading

% passing math (the percentage of students who passed math)
student_passing_math = student_data[student_data["math_score"] >= 70]
school_students_passing_math = student_passing_math.groupby("school_name")["student_name"].count()
school_students_passing_math

% passing reading (the percentage of students who passed reading)
per_school_reading = school_data_complete.groupby("school_name")["reading_score"].mean()
per_school_reading

% overall passing (the percentage of students who passed math AND reading)
per_passing_math_and_reading = student_data[
    (student_data["reading_score"] >= 70) & (student_data["math_score"] >= 70)
]
per_passing_math_and_reading = per_passing_math_and_reading.groupby(["school_name"]).size()
per_passing_math_and_reading

Highest-Performing Schools (by % Overall Passing)
Sort the schools by % Overall Passing in descending order and display the top 5 rows.

Save the results in a DataFrame called "top_schools".
top_perform = school_summary.sort_values("% Overall Passing", ascending = False)
top_perform.head().style.format({'Total Students': '{:}',
                           "Total School Budget": "${:,.2f}", 
                           "Per Student Budget": "${:.2f}", 
                           "% Passing Math": "{:6f}", 
                           "% Passing Reading": "{:6f}", 
                           "% Overall Passing": "{:6f}"})

Lowest-Performing Schools (by % Overall Passing)
Sort the schools by % Overall Passing in ascending order and display the top 5 rows.

Save the results in a DataFrame called "bottom_schools".
bottom_perform = top_perform.tail()
bottom_perform = bottom_perform.sort_values('% Overall Passing')
bottom_perform.style.format({'Total Students': '{: }', 
                       "Total School Budget": "${:,.2f}", 
                       "Per Student Budget": "${:.2f}", 
                       "% Passing Math": "{:6f}", 
                       "% Passing Reading": "{:6f}", 
                       "% Overall Passing": "{:6f}"})
Math Scores by Grade
Perform the necessary calculations to create a DataFrame that lists the average math score for students of each grade level (9th, 10th, 11th, 12th) at each school.
ninth_math = student_data.loc[student_data['grade'] == '9th'].groupby('school_name')["math_score"].mean()
tenth_math = student_data.loc[student_data['grade'] == '10th'].groupby('school_name')["math_score"].mean()
eleventh_math = student_data.loc[student_data['grade'] == '11th'].groupby('school_name')["math_score"].mean()
twelfth_math = student_data.loc[student_data['grade'] == '12th'].groupby('school_name')["math_score"].mean()

math_scores = pd.DataFrame({
        "9th": ninth_math,
        "10th": tenth_math,
        "11th": eleventh_math,
        "12th": twelfth_math
})
math_scores = math_scores[['9th', '10th', '11th', '12th']]
math_scores.index.name = "School Name"

#show and format
math_scores.style.format({'9th': '{:.6f}', 
                          "10th": '{:.6f}', 
                          "11th": "{:.6f}", 
                          "12th": "{:.6f}"})

Reading Scores by Grade
Create a DataFrame that lists the average reading score for students of each grade level (9th, 10th, 11th, 12th) at each school.
ninth_reading = student_data.loc[student_data['grade'] == '9th'].groupby('school_name')["reading_score"].mean()
tenth_reading = student_data.loc[student_data['grade'] == '10th'].groupby('school_name')["reading_score"].mean()
eleventh_reading = student_data.loc[student_data['grade'] == '11th'].groupby('school_name')["reading_score"].mean()
twelfth_reading = student_data.loc[student_data['grade'] == '12th'].groupby('school_name')["reading_score"].mean()

#merges the reading score averages by school and grade together
reading_scores = pd.DataFrame({
        "9th": ninth_reading,
        "10th": tenth_reading,
        "11th": eleventh_reading,
        "12th": twelfth_reading
})
reading_scores = reading_scores[['9th', '10th', '11th', '12th']]
reading_scores.index.name = "School Name"

#format
reading_scores.style.format({'9th': '{:.6f}', 
                             "10th": '{:.6f}', 
                             "11th": "{:.6f}", 
                             "12th": "{:.6f}"})

Scores by School Spending
Create a table that breaks down school performance based on average spending ranges (per student).

Use the code provided below to create four bins with reasonable cutoff values to group school spending.
# Establish the bins
spending_bins = [0, 585, 630, 645, 680]
labels = ["<$585", "$585-630", "$630-645", "$645-680"]
# Create a copy of the school summary since it has the "Per Student Budget"
school_spending_df = school_summary.copy()
# Use `pd.cut` to categorize spending based on the bins.
school_spending_df["Spending Ranges (Per Student)"] = pd.cut(per_school_capita, spending_bins,labels=labels)

school_spending_df

Use the scores above to create a DataFrame called spending_summary.

Include the following metrics in the table:

Average math score

Average reading score

% passing math (the percentage of students who passed math)

% passing reading (the percentage of students who passed reading)

% overall passing (the percentage of students who passed math AND reading)

Solution
#  Calculate averages for the desired columns.
spending_math_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average Math Score"].mean()
spending_reading_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average Reading Score"].mean()
spending_passing_math = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Passing Math"].mean()
spending_passing_reading = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Passing Reading"].mean()
overall_passing_spending = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Overall Passing"].mean()

# Assemble into DataFrame
spending_summary =pd.DataFrame({"Average Math Score": spending_math_scores,
                               "Average Reading Score": spending_reading_scores,
                               "% Passing Math": spending_passing_math,
                                "% Passing Reading": spending_passing_reading,
                                "% Overall Passing": overall_passing_spending})

# Display results
spending_summary

Scores by School Size
Use the following code to bin the per_school_summary.

size_bins = [0, 1000, 2000, 5000]
labels = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]
Use pd.cut on the "Total Students" column of the per_school_summary DataFrame.

Create a DataFrame called size_summary that breaks down school performance based on school size (small, medium, or large).
# Establish the bins.
size_bins = [0, 1000, 2000, 5000]
labels = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]

# Categorize the spending based on the bins
# Use `pd.cut` on the "Total Students" column of the `per_school_summary` DataFrame.

school_summary["School Size"] = pd.cut(per_school_counts,bins=size_bins,labels=labels)
type_summary = school_summary.copy()
type_summary

# Calculate averages for the desired columns.
size_math_scores = school_summary.groupby(["School Size"])["Average Math Score"].mean()
size_reading_scores = school_summary.groupby(["School Size"])["Average Reading Score"].mean()
size_passing_math = school_summary.groupby(["School Size"])["% Passing Math"].mean()
size_passing_reading = school_summary.groupby(["School Size"])["% Passing Reading"].mean()
size_overall_passing = school_summary.groupby(["School Size"])["% Overall Passing"].mean()

# Create a DataFrame called `size_summary` that breaks down school performance based on school size (small, medium, or large).
# Use the scores above to create a new DataFrame called `size_summary`
size_summary = pd.DataFrame({"Average Math Score":size_math_scores,
                             "Average Reading Score": size_reading_scores,
                             "% Passing Math":size_passing_math,
                             "% Passing Reading":size_passing_reading,
                             "% Overall Passing":size_overall_passing})

# Display results
size_summary

Scores by School Type
Use the per_school_summary DataFrame from the previous step to create a new DataFrame called type_summary.

This new DataFrame should show school performance based on the "School Type".
# Group the per_school_summary DataFrame by "School Type" and average the results.
average_math_score_by_type = school_summary.groupby(["School Type"])["Average Math Score"].mean()
average_reading_score_by_type = school_summary.groupby(["School Type"])["Average Reading Score"].mean()
average_percent_passing_math_by_type = school_summary.groupby(["School Type"])["% Passing Math"].mean()
average_percent_passing_reading_by_type = school_summary.groupby(["School Type"])["% Passing Reading"].mean()
average_percent_overall_passing_by_type = school_summary.groupby(["School Type"])["% Overall Passing"].mean()

# Assemble the new data by type into a DataFrame called `type_summary`
type_summary = pd.DataFrame({"Average Math Score": average_math_score_by_type,
                               "Average Reading Score": average_reading_score_by_type ,
                               "% Passing Math": average_percent_passing_math_by_type,
                                "% Passing Reading":average_percent_passing_reading_by_type,
                                "% Overall Passing": average_percent_overall_passing_by_type})

# Display results
type_summary











